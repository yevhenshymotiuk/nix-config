#!/usr/bin/env python

"""Nix helper"""

import argparse
import functools
import os
import platform
import subprocess

HOME = os.getenv("HOME")
HOST = platform.node()
OS = platform.system()
FLAKE_PATH = f"{HOME}/.nixpkgs" if OS == "Darwin" else "/etc/nixos"
NIXOS_REBUILD = ("darwin" if OS == "Darwin" else "nixos") + "-rebuild"

COMMANDS = {"check", "build", "rebuild", "search", "shell", "generations"}
COMMANDS_WHICH_FORWARD_ARGUMENTS = {"build", "shell"}
COMMAND_ALIASES = {"c": "check", "b": "build", "s": "search"}
ACTION_ALIASES = {"generations": {"ls": "list", "rm": "remove"}}


def check():
    """Check whether the flake evaluates and run its tests"""
    return subprocess.call(["nix", "flake", "check"])


def build(*args):
    """Build a Nix expression"""
    options = list(args)
    return subprocess.call(["nix-build"] + options)


def rebuild():
    """Rebuild the current system's flake"""
    return subprocess.call(
        [NIXOS_REBUILD, "switch", "--flake", f"{FLAKE_PATH}#{HOST}"]
    )


def search(package):
    """Search nixpkgs for a package"""
    return subprocess.call(["nix", "search", "nixpkgs", package])


def shell(*args):
    """Run a shell in which the specified packages are available"""
    options = list(args)
    return subprocess.call(["nix", "shell"] + options)


def generations_list():
    """List generations"""
    return subprocess.call(["nix-env", "--list-generations"])


def generations_remove(generations):
    """Remove generations"""
    return subprocess.call(["nix-env", "--delete-generations", generations])


class CommandNotExists(Exception):
    pass


def aliases_from_command(command):
    return [al for al, com in COMMAND_ALIASES.items() if com == command]


def aliases_from_action(command, action):
    return [al for al, ac in ACTION_ALIASES[command].items() if ac == action]


def follow_aliases(func):
    """Substitute aliases with commands or actions"""

    @functools.wraps(func)
    def wrapper(command, args, *pargs):
        if command not in COMMANDS and command not in COMMAND_ALIASES:
            raise CommandNotExists("command does not exist")
        command = COMMAND_ALIASES.get(command) or command
        if "action" in args:
            args.action = (
                ACTION_ALIASES.get(command).get(args.action) or args.action
            )
        return func(command, args, *pargs)

    return wrapper


@follow_aliases
def execute_command(command, args, unknown):
    action = None
    if "action" in args:
        action = args.action
        del args.action
    function_name = f"{command}_{action}" if action else command
    command_function = (
        globals()[function_name] if command in COMMANDS else None
    )
    pargs = unknown if command in COMMANDS_WHICH_FORWARD_ARGUMENTS else []
    return command_function(*pargs, **vars(args))


def parse_args():
    parser = argparse.ArgumentParser(description="Nix helper")
    # h <command>
    subparsers = parser.add_subparsers(
        dest="command", help="command to execute", required=True
    )
    # h check
    subparsers.add_parser(
        "check", aliases=aliases_from_command("check"), help=check.__doc__
    )
    # h build
    subparsers.add_parser(
        "build", aliases=aliases_from_command("build"), help=build.__doc__
    )
    # h rebuild
    subparsers.add_parser("rebuild", help=rebuild.__doc__)
    # h search
    subparser_search = subparsers.add_parser(
        "search", aliases=aliases_from_command("search"), help=search.__doc__
    )
    # h search <package>
    subparser_search.add_argument("package", type=str, help="package name")
    subparsers.add_parser("shell", help=shell.__doc__)
    # h generations
    subparser_generations = subparsers.add_parser(
        "generations", help="Explore, manage generations"
    )
    # h generations <action>
    subparser_generations_actions = subparser_generations.add_subparsers(
        dest="action", help="action to do", required=True
    )
    # h generations list
    subparser_generations_actions.add_parser(
        "list",
        aliases=aliases_from_action("generations", "list"),
        help=generations_list.__doc__,
    )
    # h generations remove
    subparser_generations_actions_remove = (
        subparser_generations_actions.add_parser(
            "remove",
            aliases=aliases_from_action("generations", "remove"),
            help=generations_remove.__doc__,
        )
    )
    # h generations remove <generations>
    subparser_generations_actions_remove.add_argument(
        "generations", help="generations to remove", type=str
    )
    return parser.parse_known_args()


def cli():
    args, unknown = parse_args()
    command = args.command
    del args.command
    return execute_command(command, args, unknown)


if __name__ == "__main__":
    cli()
