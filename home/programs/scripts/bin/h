#!/usr/bin/env python3

"""Nix helper"""

import os
import platform
import subprocess
from typing import List

# pylint: disable=import-error
from clion import Clion


HOME = os.getenv("HOME")
HOST = platform.node()
OS = platform.system()
FLAKE_PATH = f"{HOME}/.nixpkgs" if OS == "Darwin" else "/etc/nixos"
SYSTEM_PROFILE = "/nix/var/nix/profiles/system"
NIXOS_REBUILD = ("darwin" if OS == "Darwin" else "nixos") + "-rebuild"

app = Clion(description="Nix helper")
generations_app = Clion(description="Explore, manage generations")
app.add_clion(generations_app, name="generations")


@app.command(aliases=["b"])
def build(*args):
    """Build a Nix expression"""
    options = list(args)
    return subprocess.run(["nix", "build"] + options, check=False)


@app.command(aliases=["c"])
def check(path=None):
    """
    Check whether the flake evaluates and run its tests

    Parameters
    ----------
    path
        path to a flake
    """
    return subprocess.run(
        ["nix", "flake", "check", path or FLAKE_PATH], check=False
    )


@generations_app.command("list", aliases=["ls"])
def generations_list():
    """List generations"""
    return subprocess.run(
        (["sudo"] if OS == "Linux" else [])
        + [
            "nix-env",
            "--list-generations",
            "--profile",
            SYSTEM_PROFILE,
        ],
        check=False,
    )


@generations_app.command("remove", aliases=["rm"])
def generations_remove(generations_: List[str]):
    """
    Remove generations

    Parameters
    ----------
    generations
        generations to remove
    """
    return subprocess.run(
        (["sudo"] if OS == "Linux" else [])
        + ["nix-env", "--delete-generations"]
        + generations_
        + ["--profile", SYSTEM_PROFILE],
        check=False,
    )


@app.command(aliases=["rb"])
def rebuild(*args):
    """Rebuild the current system's flake"""
    options = list(args)
    return subprocess.run(
        (["sudo"] if OS == "Linux" else [])
        + [NIXOS_REBUILD, "switch", "--flake", f"{FLAKE_PATH}#{HOST}"]
        + options,
        check=False,
    )


@app.command(aliases=["s"])
def search(package: str):
    """
    Search nixpkgs for a package

    Parameters
    ----------
    package
        package name
    """
    return subprocess.run(["nix", "search", "nixpkgs", package], check=False)


@app.command(aliases=["sh"])
def shell(packages: List[str]):
    """
    Run a shell in which the specified packages are available

    Parameters
    ----------
    packages
        package names
    """
    packages = [f"nixpkgs#{p}" for p in list(packages)]
    return subprocess.run(["nix", "shell"] + packages, check=False)


@app.command(aliases=["u"])
def update(*args):
    """Update flake lock file"""
    options = list(args)
    return subprocess.run(["nix", "flake", "update"] + options, check=False)


if __name__ == "__main__":
    app()
