#!/usr/bin/env python3

"""Nix helper"""

import argparse
import functools
import inspect
import os
import platform
import subprocess
from collections import defaultdict
from typing import List


HOME = os.getenv("HOME")
HOST = platform.node()
OS = platform.system()
FLAKE_PATH = f"{HOME}/.nixpkgs" if OS == "Darwin" else "/etc/nixos"
SYSTEM_PROFILE = "/nix/var/nix/profiles/system"
NIXOS_REBUILD = ("darwin" if OS == "Darwin" else "nixos") + "-rebuild"


def command(aliases=[]):
    """Make function a cli command"""

    def decorator_command(command_func):
        global _commands, _command_aliases
        if not "_commands" in globals():
            _commands = set()
        if not "_command_aliases" in globals():
            _command_aliases = {}
        command_name = command_func.__name__
        _commands.add(command_name)
        for alias in aliases:
            _command_aliases[alias] = command_name

        def action(aliases):
            """Make function an action of a cli command"""

            def decorator_action(action_func):
                global _actions, _action_aliases
                if not "_actions" in globals():
                    _actions = defaultdict(set)
                if not "_action_aliases" in globals():
                    _action_aliases = defaultdict(dict)
                _, action_name = action_func.__name__.split("_")
                _actions[command_name].add(action_name)
                for alias in aliases:
                    _action_aliases[command_name][alias] = action_name

                @functools.wraps(action_func)
                def wrapper(*args, **kwargs):
                    action_func(*args, **kwargs)

                return wrapper

            return decorator_action

        command_func.action = action

        @functools.wraps(command_func)
        def wrapper(*args, **kwargs):
            return command_func(*args, **kwargs)

        return wrapper

    return decorator_command


class CommandNotExists(Exception):
    pass


def aliases_from_command(command):
    return [al for al, com in _command_aliases.items() if com == command]


def aliases_from_action(command, action):
    return [al for al, ac in _action_aliases[command].items() if ac == action]


def command_forwards_arguments(f):
    return str(inspect.signature(f)) in {"(*args)", "(*args, *kwargs)"}


def is_command(command):
    return command in _commands


def follow_aliases(func):
    """Substitute aliases with commands or actions"""

    @functools.wraps(func)
    def wrapper(command, args, *pargs):
        if command not in _commands and command not in _command_aliases:
            raise CommandNotExists("command does not exist")
        command = _command_aliases.get(command, command)
        if "action" in args:
            args.action = (
                _action_aliases.get(command).get(args.action) or args.action
            )
        return func(command, args, *pargs)

    return wrapper


@follow_aliases
def execute_command(command, args, unknown):
    action = None
    if "action" in args:
        action = args.action
        del args.action
    function_name = f"{command}_{action}" if action else command
    command_function = (
        globals()[function_name] if command in _commands else None
    )
    pargs = unknown if command_forwards_arguments(command_function) else []
    return command_function(*pargs, **vars(args))


def add_parser(subparsers, name, command=None):
    aliases = (
        aliases_from_action(command, name)
        if command
        else aliases_from_command(name)
    )
    function_name = f"{command}_{name}" if command else name
    if function_name not in globals():
        raise NameError(f"function '{function_name}' is not defined")
    return subparsers.add_parser(
        name, aliases=aliases, help=globals()[function_name].__doc__
    )


def function_args_to_cli_args(name: str, command=None):
    cli_arguments = []
    func = globals()[f"{command}_{name}"] if command else globals()[name]
    fullargspec = inspect.getfullargspec(
        func.__dict__.get("__wrapped__", func)
    )
    defaults = fullargspec.defaults
    for i, arg in enumerate(fullargspec.args):
        cli_argument = {}
        cli_argument["name"] = arg
        type_ = fullargspec.annotations.get(arg, str)
        if hasattr(type_, "__origin__") and type_.__origin__ is list:
            type_ = type_.__args__[0]
            cli_argument["nargs"] = "+"
        cli_argument["type"] = type_
        cli_argument["default"] = (
            defaults[i] if defaults and i < len(defaults) else None
        )
        if cli_argument["default"]:
            cli_argument["nargs"] = "?"
        cli_arguments.append(cli_argument)
    return cli_arguments


def parse_args():
    parser = argparse.ArgumentParser(description="Nix helper")
    subparsers = parser.add_subparsers(
        dest="command", help="command to execute", required=True
    )
    command_argument_help_strings = {
        "search": {"package": "package name"},
        "shell": {"packages": "package names"},
    }
    action_argument_help_strings = {
        "generations": {"remove": {"generations": "generations to remove"}}
    }
    for command in _commands:
        subparser_command = add_parser(subparsers, command)
        for command_argument in function_args_to_cli_args(command):
            name = command_argument.pop("name")
            command_argument["help"] = command_argument_help_strings.get(
                command, {}
            ).get(name)
            subparser_command.add_argument(name, **command_argument)
        if "_actions" not in globals() or not _actions[command]:
            continue
        subparsers_command_actions = subparser_command.add_subparsers(
            dest="action", help="action to do", required=True
        )
        for action in _actions[command]:
            subparser_action = add_parser(
                subparsers_command_actions, action, command
            )
            for action_argument in function_args_to_cli_args(
                action, command=command
            ):
                name = action_argument.pop("name")
                action_argument["help"] = action_argument_help_strings[
                    command
                ][action][name]
                subparser_action.add_argument(name, **action_argument)
    return parser.parse_known_args()


def cli():
    args, unknown = parse_args()
    command = args.command
    del args.command
    return execute_command(command, args, unknown)


@command(["b"])
def build(*args):
    """Build a Nix expression"""
    options = list(args)
    return subprocess.run(["nix-build"] + options, check=False)


@command(["c"])
def check():
    """Check whether the flake evaluates and run its tests"""
    return subprocess.run(["nix", "flake", "check"], check=False)


@command(["g"])
def generations():
    """Explore, manage generations"""


@generations.action(["ls"])
def generations_list():
    """List generations"""
    return subprocess.run(
        (["sudo"] if OS == "Linux" else [])
        + [
            "nix-env",
            "--list-generations",
            "--profile",
            SYSTEM_PROFILE,
        ],
        check=False,
    )


@generations.action(["rm"])
def generations_remove(generations: List[str]):
    """Remove generations"""
    return subprocess.run(
        (["sudo"] if OS == "Linux" else [])
        + ["nix-env", "--delete-generations"]
        + generations
        + ["--profile", SYSTEM_PROFILE],
        check=False,
    )


@command(["rb"])
def rebuild(*args):
    """Rebuild the current system's flake"""
    options = list(args)
    return subprocess.run(
        (["sudo"] if OS == "Linux" else [])
        + [NIXOS_REBUILD, "switch", "--flake", f"{FLAKE_PATH}#{HOST}"]
        + options,
        check=False,
    )


@command(["s"])
def search(package: str):
    """Search nixpkgs for a package"""
    return subprocess.run(["nix", "search", "nixpkgs", package], check=False)


@command(["sh"])
def shell(packages: List[str]):
    """Run a shell in which the specified packages are available"""
    packages = [f"nixpkgs#{p}" for p in list(packages)]
    return subprocess.run(["nix", "shell"] + packages, check=False)


@command(["u"])
def update(*args):
    """Update flake lock file"""
    options = list(args)
    return subprocess.run(["nix", "flake", "update"] + options, check=False)


if __name__ == "__main__":
    cli()
